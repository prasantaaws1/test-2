name: Deploy to Amazon ECS Fargate

on:
  push:
    branches:
      - main

env:
  ECR_REPOSITORY_NAME: test
  AWS_REGION: us-east-1                  # set this to your preferred AWS region, e.g. us-west-1
  #ECR_REPOSITORY: test           # set this to your Amazon ECR repository name
  ECS_SERVICE: ecs-service               # set this to your Amazon ECS service name
  ECS_CLUSTER: ecs-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ecs-app-task # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: react-app          # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./apps/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  # deploy:
  #   name: Deploy
  #   runs-on: self-hosted
  
  #   needs: build-and-push
  
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
  
  #     - name: Deploy Amazon ECS task definition
  #       id: deploy
  #       run: |
  #         # Update ECS Service with the new task definition
  #         aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_DEFINITION --force-new-deployment
  
  #     - name: Wait for deployment to stabilize
  #       id: wait
  #       run: |
  #         # Wait for the deployment to stabilize
  #         STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].deployments[0].rolloutState' --output text)
  #         while [[ $STATUS != "COMPLETED" && $STATUS != "FAILED" ]]; do
  #           echo "Waiting for deployment to stabilize..."
  #           sleep 30
  #           STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].deployments[0].rolloutState' --output text)
  #         done
  #         echo "Deployment status: $STATUS"
  #         echo "::set-output name=status::$STATUS"
  
  #     - name: Rollback if deployment failed
  #       if: steps.wait.outputs.status == 'FAILED'
  #       run: |
  #         # Rollback to the previous task definition
  #         PREV_TASK_DEFINITION=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].deployments[1].taskDefinition' --output text)
  #         aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $PREV_TASK_DEFINITION --force-new-deployment
  #         echo "Rollback to previous task definition ($PREV_TASK_DEFINITION) initiated."
  
  #     - name: Notify on rollback
  #       if: steps.wait.outputs.status == 'FAILED'
  #       run: |
  #         echo "Deployment failed. Rollback has been initiated. Please check ECS for further details."
  
  
  #     - name: Deploy Amazon ECS task definition
  #       run: 
  #         aws ecs update-service --cluster $ECS_CLUSTER --no-paginate --service $ECS_SERVICE --force-new-deployment
